def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)

    while queue:
        s = queue.pop(0)
        print(s, end=" ")

        for neighbour in graph[s]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

visited = []
queue = []

bfs(visited, graph, 'A')

x = int(input('Enter initial value of 4-liter jug: '))
y = int(input('Enter initial value of 3-liter jug: '))

while x != 2:
    rno = int(input('Enter rule: '))
    if rno == 1:
        if x < 4:
            x = 4
    if rno == 2:
        if y < 3:
            y = 3
    if rno == 3:
        if x > 0:
            x = 0
    if rno == 4:
        if y > 0:
            y = 0
    if rno == 5:
        if (x + y) >= 4 and y > 0:
            x = 4
            y = y - (x - 3)
    if rno == 6:
        if (x + y) >= 3 and x > 0:
            x = x - (3 - y)
            y = 3
    if rno == 7:
        if (x + y) <= 4 and y > 0:
            x = x + y
            y = 0
    if rno == 8:
        if (x + y) <= 3 and x > 0:
            x = 0
            y = x + y

    print(f'Current state: {x}-liter jug, {y}-liter jug')
