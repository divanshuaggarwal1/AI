adj_list = {
    'A':['B','C'],
    'B':['D','E'],
    'C':['E','F'],
    'D':['G','B'],
    'E':['B','C'],
    'F':['C','H'],
    'G':['I'],
    'H':['K'],
    'I':['J'],
    'J':[],
    'K':['L'],
    'L':['M'],
    'M':['N'],
    'N':[] 
}

traversal_path =[]
stack=[]
visited=[]
goal =['J','N']

def DFS(adj_list,start,path):
    stack.append(start)
    while stack:
        s=stack.pop()
        path.append(s)
        visited.append(s)
        if s in goal:
            return path
        for neighbour in adj_list[s]:
            if neighbour not in visited:
                stack.append(neighbour)
traversal_path=DFS(adj_list,'A',traversal_path)
print(traversal_path)
